#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var fs = require('fs');
var debug = require('debug')('apprtc:server');

/**
 * Get port from environment and store in Express.
 */

var port = config.server.listen;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server;
if (config.server.https) {
    var https = require('https');
    server = https.createServer({
        key: fs.readFileSync(config.server.key),
        cert: fs.readFileSync(config.server.cert),
        ca: config.server.ca.map(fs.readFileSync.bind(fs)),

        requestCert: false,
        handshakeTimeout: config.server.handshakeTimeout || 10000,
        rejectUnauthorized: false
    });
} else {
    var http = require('http');
    server = http.createServer();
}

server.addListener('request', app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
